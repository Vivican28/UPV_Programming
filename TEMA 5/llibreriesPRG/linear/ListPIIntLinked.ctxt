#BlueJ class context
comment0.target=ListPIIntLinked
comment0.text=\r\n\ ListPIIntLinked\:\ Implementaci\u00F3\ enlla\u00E7ada\ de\ l'estructura\ de\ dades\ \r\n\ lineal\ Llista\ amb\ punt\ d'inter\u00E8s\ d'enters.\r\n\ \r\n\ @author\ PRG\r\n\ @version\ Curs\ 2019/20\r\n
comment1.params=
comment1.target=ListPIIntLinked()
comment1.text=\r\n\ Crea\ una\ llista\ buida.\r\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\r\n\ Comprova\ si\ la\ llista\ actual\ \u00E9s\ igual\ o\ no\ a\ una\ llista\ donada.\r\n\ Dues\ llistes\ s\u00F3n\ iguals\ si\ s\u00F3n\ iguals\ tots\ els\ seus\ elements\ \r\n\ i\ en\ el\ mateix\ ordre.\r\n\ @param\ o\ Object\ que\ representa\ la\ llista\ a\ comparar.\r\n\ @return\ boolean,\ true\ si\ s\u00F3n\ iguals\ i\ false\ en\ cas\ contrari.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Torna\ un\ String\ amb\ els\ elements\ de\ la\ llista\ actual.\r\n\ @return\ String\ amb\ les\ dades\ de\ la\ llista.\r\n
comment12.params=aux\ x
comment12.target=boolean\ search(NodeInt,\ int)
comment12.text=\r\n\ M\u00E8tode\ privat\ auxiliar\ que\ busca\ la\ primera\ ocurr\u00E8ncia\ de\ x\ \r\n\ des\ del\ node\ aux\ en\ endavant;\ si\ el\ troba,\ mou\ el\ PI\ al\ node\ \r\n\ que\ cont\u00E9\ a\ x.\ Si\ no\ apareix,\ el\ PI\ no\ es\ mou.\r\n\ @param\ aux\ NodeInt\ a\ partir\ del\ qual\ es\ fa\ la\ cerca\r\n\ @param\ x\ int\ a\ buscar\r\n\ @return\ boolean\ true\ si\ el\ troba\ i\ false\ en\ cas\ contrari.\r\n
comment13.params=x
comment13.target=boolean\ search(int)
comment13.text=\r\n\ Busca\ la\ primera\ ocurr\u00E8ncia\ de\ x\ des\ del\ primer\ node\ de\ la\ llista;\ \r\n\ si\ el\ troba,\ mou\ el\ PI\ al\ node\ que\ cont\u00E9\ a\ x.\ Si\ no\ apareix,\ el\ PI\ \r\n\ no\ es\ mou.\r\n\ @param\ x\ int\ a\ buscar\r\n\ @return\ boolean\ true\ si\ el\ troba\ i\ false\ en\ cas\ contrari.\r\n
comment14.params=x
comment14.target=boolean\ searchFromPI(int)
comment14.text=\r\n\ Busca\ la\ primera\ ocurr\u00E8ncia\ de\ x\ des\ del\ node\ del\ PI\ (inclusivament)\ \r\n\ de\ la\ llista;\ si\ el\ troba,\ mou\ el\ PI\ al\ node\ que\ cont\u00E9\ a\ x.\ Si\ no\ \r\n\ apareix,\ el\ PI\ no\ es\ mou.\r\n\ @param\ x\ int\ a\ buscar\r\n\ @return\ boolean\ true\ si\ el\ troba\ i\ false\ en\ cas\ contrari.\r\n
comment15.params=
comment15.target=void\ anterior()
comment15.text=\r\n\ Canvia\ el\ punt\ d'inter\u00E9s\ a\ la\ posici\u00F3\ anterior\ a\ l'actual\r\n\ en\ la\ llista.\ L'operaci\u00F3\ no\ est\u00E0\ definida\ si\ el\ punt\r\n\ d'inter\u00E9s\ est\u00E0\ sobre\ el\ primer\ element\ de\ la\ llista.\r\n\ Precondici\u00F3\:\ PI\ \!\=\ first\r\n
comment16.params=x
comment16.target=void\ removeAll(int)
comment16.text=\r\n\ Esborra\ de\ la\ llista\ totes\ les\ aparicions\ de\ la\ dada\ x\ \r\n\ i\ deixa\ el\ punt\ d'inter\u00E9s\ al\ final\ del\ tot.\r\n\ @param\ x\ int\ valor\ a\ esborrar\r\n
comment17.params=x
comment17.target=void\ insertSort(int)
comment17.text=\r\n\ Insereix\ ordenadament\ un\ nou\ element\ en\ la\ llista.\r\n\ Precondici\u00F3\:\ la\ llista\ est\u00E0\ ordenada\ ascendentment.\r\n\ @param\ x\ int\ valor\ a\ inserir.\r\n
comment18.params=x
comment18.target=void\ removeLessThanInOrd(int)
comment2.params=
comment2.target=boolean\ empty()
comment2.text=\r\n\ Comprova\ si\ la\ llista\ actual\ est\u00E0\ o\ no\ buida.\r\n\ @return\ boolean,\ true\ si\ la\ llista\ est\u00E0\ buida\ i\ false\ en\ cas\ contrari.\r\n
comment3.params=
comment3.target=boolean\ isEnd()
comment3.text=\r\n\ Comprova\ si\ el\ punt\ d'inter\u00E8s\ est\u00E0\ al\ final\ de\ la\ llista\ actual.\r\n\ @return\ boolean,\ true\ si\ el\ PI\ est\u00E0\ al\ final\ de\ la\ llista\ i\ false\ \r\n\ en\ cas\ contrari.\r\n
comment4.params=
comment4.target=int\ size()
comment4.text=\r\n\ Torna\ el\ n\u00FAmero\ d'elements\ de\ la\ llista\ actual.\r\n\ @return\ int,\ n\u00FAmero\ d'elements\ de\ la\ llista\ actual.\r\n
comment5.params=
comment5.target=void\ begin()
comment5.text=\r\n\ Situa\ el\ punt\ d'inter\u00E8s\ en\ la\ primera\ posici\u00F3\ de\ la\ llista\ actual.\r\n
comment6.params=
comment6.target=void\ next()
comment6.text=\r\n\ Despla\u00E7a\ el\ PI\ una\ posici\u00F3\ cap\ a\ la\ dreta.\ \r\n\ @throws\ NoSuchElementException\ si\ el\ PI\ es\ troba\ al\ final\ de\ la\ llista.\r\n
comment7.params=
comment7.target=int\ get()
comment7.text=\r\n\ Torna\ l'element\ en\ el\ PI.\ \r\n\ @throws\ NoSuchElementException\ si\ el\ PI\ es\ troba\ al\ final\ de\ la\ llista.\r\n\ @return\ int,\ element\ en\ el\ PI\ de\ la\ llista.\r\n
comment8.params=x
comment8.target=void\ insert(int)
comment8.text=\r\n\ Insereix\ un\ nou\ node\ amb\ l'element\ x\ en\ la\ posici\u00F3\ anterior\ al\ PI.\ \r\n\ Si\ el\ cursor\ est\u00E0\ a\ l\u2019inici,\ el\ nou\ node\ ser\u00E0\ el\ first\ de\ la\ \r\n\ llista.\ En\ qualsevol\ altre\ cas,\ el\ nou\ node\ s\u2019insereix\ entre\ el\ \r\n\ node\ cursor\ i\ el\ seu\ node\ predecessor.\r\n\ @param\ x,\ element\ a\ afegir\ en\ la\ llista.\r\n
comment9.params=
comment9.target=int\ remove()
comment9.text=\r\n\ Torna\ i\ elimina\ de\ la\ llista\ l'element\ en\ el\ PI.\ \r\n\ Si\ el\ cursor\ est\u00E0\ a\ l\u2019inici,\ first\ s\u2019actualitza\ al\ seu\ node\ \r\n\ seg\u00FCent.\ En\ qualevol\ altre\ cas,\ els\ nodes\ anterior\ i\ posterior\ \r\n\ al\ node\ cursor\ queden\ enlla\u00E7ats.\r\n\ @throws\ NoSuchElementException\ si\ el\ PI\ es\ troba\ al\ final\ de\ la\ llista.\r\n\ @return\ int,\ element\ en\ el\ PI\ de\ la\ llista.\r\n
numComments=19
