#BlueJ class context
comment0.target=UtilLinked
comment0.text=\r\n\ Classe\ UtilLinked\:\ classe\ d'utilitats\ que\ cont\u00E9\ operacions\ amb\r\n\ seq\u00FC\u00E8ncies\ enlla\u00E7ades.\r\n\ \r\n\ @author\ PRG\ \r\n\ @version\ Curs\ 2019/20\r\n
comment1.params=
comment1.target=UtilLinked()
comment1.text=No\ hi\ ha\ objectes\ d'aquesta\ classe.
comment10.params=seq\ d\ i
comment10.target=NodeInt\ insert(NodeInt,\ int,\ int)
comment10.text=\r\n\ Donada\ una\ seq\u00FC\u00E8ncia,\ insereix\ la\ dada\ d\ en\ la\ posici\u00F3\ i>\=0.\r\n\ Si\ l\u2019\u00EDndex\ sobrepassa\ la\ longitud\ de\ la\ seq\u00FC\u00E8ncia,\ la\ inserci\u00F3\ \r\n\ no\ es\ fa.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ inserir.\ \r\n\ @param\ i\ int\ posici\u00F3\ on\ inserir,\ 0<\=i.\r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ resultat.\r\n
comment11.params=seq\ d
comment11.target=NodeInt\ insertSort(NodeInt,\ int)
comment11.text=\r\n\ Donada\ una\ seq\u00FC\u00E8ncia\ tal\ que\ les\ seues\ dades\ estan\ ordenades\ \r\n\ de\ menor\ a\ major,\ insereix\ la\ dada\ d\ mantenint\ l'ordenaci\u00F3.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ inserir.\ \r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ resultat.\r\n
comment12.params=seq\ d
comment12.target=NodeInt\ delete(NodeInt,\ int)
comment12.text=\r\n\ Donada\ una\ seq\u00FC\u00E8ncia\ enlla\u00E7ada,\ esborra,\ si\ existeix,\ la\ primera\ \r\n\ ocurrencia\ d'una\ dada\ d.\ Si\ aquest\ element\ no\ apareix,\ no\ es\ fa\ res.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ esborrar.\ \r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ resultat.\r\n
comment13.params=seq\ limit
comment13.target=NodeInt\ deleteUnder(NodeInt,\ int)
comment13.text=\r\n\ Donada\ una\ seq\u00FC\u00E8ncia\ enlla\u00E7ada,\ esborra\ els\ elements\ menors\ \r\n\ que\ un\ umbral\ donat.\ \r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ limit\ int\ a\ comparar.\ \r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ resultat.\r\n
comment14.params=a
comment14.target=NodeInt\ toSeq(int[])
comment14.text=\ Torna\ en\ una\ seq\u00FC\u00E8ncia\ els\ elements\ d'un\ array\ a.\r\n\ \ @param\ a\ array\ d'enters\ seq\u00FC\u00E8ncia\ origen.\r\n\ \ @return\ NodeInt\ seq\u00FC\u00E8ncia\ amb\ els\ elements\ de\ l'array\ a.\r\n
comment15.params=seq
comment15.target=NodeInt\ invertir(NodeInt)
comment15.text=\r\n\ Inverteix\ l'ordre\ dels\ elements\ d'una\ seq\u00FC\u00E8ncia\ donada\ \r\n\ (amb\ cost\ lineal).\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ a\ invertir.\r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ invertida.\r\n
comment16.params=seq\ e
comment16.target=NodeInt\ menorsQue(NodeInt,\ int)
comment16.text=\ \r\n\ Torna\ una\ seq\u00FC\u00E8ncia\ enlla\u00E7ada\ amb\ els\ elements\ menors\ que\ e,\r\n\ i\ en\ el\ mateix\ ordre\ que\ apareixen\ en\ una\ seq\u00FC\u00E8ncia\ donada\ seq.\r\n\ El\ cost\ ser\u00E0\ lineal\ amb\ la\ longitud\ de\ seq.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ e\ int\ a\ comparar.\r\n\ @return\ NodeInt\ seq\u00FC\u00E8ncia\ enlla\u00E7ada\ amb\ els\ elements\ menors\ que\ e,\ \r\n\ \ \ \ \ \ \ \ \ en\ el\ mateix\ ordre\ que\ apareixen\ en\ la\ seq\u00FC\u00E8ncia\ original.\r\n
comment2.params=seq\ max
comment2.target=void\ saturar(NodeInt,\ int)
comment2.text=\r\n\ Satura\ les\ dades\ d'una\ seq\u00FC\u00E8ncia\ donada\ a\ un\ valor\ m\u00E0xim.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ max\ int\ a\ saturar.\ \r\n
comment3.params=seq
comment3.target=int\ maxim(NodeInt)
comment3.text=\r\n\ Torna\ el\ m\u00E0xim\ d'una\ seq\u00FC\u00E8ncia\ donada\ amb,\ al\ menys,\ un\ node.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ original.\r\n\ @return\ int\ valor\ m\u00E0xim\ de\ la\ seq\u00FC\u00E8ncia.\r\n
comment4.params=seq
comment4.target=int\ talla(NodeInt)
comment4.text=\ Torna\ el\ nombre\ d'elements\ de\ la\ seq\u00FC\u00E8ncia\ seq.\r\n\ \ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ \ @return\ int\ nombre\ d'elements\ de\ seq.\r\n
comment5.params=seq
comment5.target=int[]\ toArray(NodeInt)
comment5.text=\ Torna\ en\ un\ array\ del\ tamany\ just\ els\ elements\ de\ la\ seq\u00FC\u00E8ncia\ seq.\r\n\ \ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ \ @return\ int[]\ array\ amb\ els\ elements\ de\ seq.\r\n
comment6.params=seq
comment6.target=java.lang.String\ toString(NodeInt)
comment6.text=\ Donada\ una\ seq\u00FC\u00E8ncia\ enlla\u00E7ada\ d'enters,\ torna\ un\ \r\n\ \ String\ amb\ les\ seues\ dades.\ En\ l'String\ cada\ dada\ est\u00E0\ separada\ \r\n\ \ de\ la\ seg\u00FCent\ per\ un\ espai\ en\ blanc.\r\n\ \ @param\ seq\ NodeInt\ que\ representa\ una\ seq\u00FC\u00E8ncia\ enlla\u00E7ada\ d'enters.\r\n\ \ @return\ String.\r\n
comment7.params=seq\ d
comment7.target=NodeInt\ cercarDada(NodeInt,\ int)
comment7.text=\r\n\ Torna\ el\ primer\ node\ d'una\ seq\u00FCencia\ donada\ seq\ que\ cont\u00E9\ el\ valor\ d.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ buscar.\ \r\n\ @return\ NodeInt\ refer\u00E8ncia\ al\ node\ que\ cont\u00E9\ el\ valor\ d\ \r\n\ \ \ \ \ o\ null\ si\ cap\ node\ cont\u00E9\ a\ d.\r\n
comment8.params=seq\ d
comment8.target=void\ canviarSigne(NodeInt,\ int)
comment8.text=\ \r\n\ Canvia\ el\ signe\ de\ la\ primera\ ocurr\u00E8ncia\ de\ d\ en\ una\ seq\u00FC\u00E8ncia\r\n\ donada\ seq.\ Si\ d\ no\ apareix,\ el\ m\u00E8tode\ no\ fa\ res.\ \ \ \r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ buscar.\r\n
comment9.params=seq\ d
comment9.target=int\ cercarPos(NodeInt,\ int)
comment9.text=\r\n\ Torna\ la\ posici\u00F3\ de\ la\ primera\ ocurr\u00E8ncia\ d'un\ valor\ d\ en\ \r\n\ una\ seq\u00FC\u00E8ncia\ donada\ seq.\r\n\ @param\ seq\ NodeInt\ seq\u00FC\u00E8ncia\ origen.\r\n\ @param\ d\ int\ a\ buscar.\ \r\n\ @return\ int\ posici\u00F3\ que\ ocupa\ d\ en\ la\ seq\u00FC\u00E8ncia\ o\ -1\ si\ no\ est\u00E0.\r\n
numComments=17
